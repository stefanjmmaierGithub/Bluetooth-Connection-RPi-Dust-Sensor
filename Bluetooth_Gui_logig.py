# -*- coding: utf-8 -*-
"""
@autor: Stefan Maier
This is the implemention of the bluetooth_gui.py generated by Qt4 Desinger.
The script is written in Phyton3

"""

from PyQt4 import QtGui
import sys
#import time
import bluetooth_gui 
import BluetoothClient_class
import measurementThreads  # import the .py file with the classes
import Ringbuffer_Float 
import Ringbuffer_String 
import random
import time
import gc


threads=[]
guithreads=[]

firstRun = 0
ringlen = 100
ringBuffFloat= Ringbuffer_Float.RingBuffer_float(ringlen)
ringBuffString = Ringbuffer_String.RingBuffer_string(ringlen)


class hwl(QtGui.QDialog,bluetooth_gui.Ui_Dialog):
  
    
    def __init__(self,parent=None):
        super(hwl,self).__init__(parent)
        self.setupUi(self)
        self.connectActions()
        self.btc = BluetoothClient_class.BluetoothClient
        #gc.disable()
        
    def main(self):
        self.show()

    def connectActions(self):
       
        self.pbConnect.clicked.connect(self.connectToServer)
        self.pbDisconnect.clicked.connect(self.disconnectFromServer)
        self.pbClose.clicked.connect(self.closeGUI)
        self.pbDisconnect.hide()
        self.cBDataSelection.currentIndexChanged.connect(self.getDataFromServer)
        self.cBDataSelection.hide()
        self.tlTextline.setText("Connect to Server!")
  



    


    def connectToServer(self):
                                                                  
                       respond = self.btc.connectToServer()
                       self.pbConnect.hide()
                       self.pbClose.hide()
                       self.pbDisconnect.show()
                       self.cBDataSelection.show()
                       self.tlTextline.setText(respond)
                       #Start Update GUI Thread
                       guiThread = measurementThreads.guiThread("Update Gui",0.1,self.tlTextline,self.widget.canvas,ringBuffString,ringBuffFloat)
                       guithreads.append(guiThread)
                       guiThread.start()
                       

    def closeGUI(self):
                       global guithreads
                       stopGUIThread = measurementThreads.exitFlagGui("Stop GUI Thread")
                       guithreads.append(stopGUIThread)
                       stopGUIThread.start()
                       for t in guithreads:
                               t.join()
                               print ("Join Close GUI Threads")
                       guithreads = []
                        


         
    def disconnectFromServer(self): 
        
                           self.pbConnect.show()
                           self.cBDataSelection.hide()
                           self.pbClose.show()
                           self.pbDisconnect.hide()
                                                      
                           global threads                            
                           respond = self.btc.closeServerConnection()
                           self.tlTextline.setText(respond)
                           # Wait for all threads to com
                           stopThread = measurementThreads.stopThread("Stop Thread")
                           threads.append(stopThread)
                           stopThread.start()
                           for t in threads:
                               t.join()
                               print ("Exiting Main Thread")
                           threads = []
                           
                        
        
        
    def getDataFromServer(self):
                         global threads
                         global firstRun
                         global threads
                         
                         requiredData = self.cBDataSelection.currentText()
                         
                         
                         stopThread = measurementThreads.stopThread("Stop Thread")
                         threads.append(stopThread)
                         stopThread.start()
                         for t in threads:
                             t.join()
                             print ("Join all Threads",threads)
                         threads = []           
                    
                    
                         #Initialisieren der Messung
                         startThreading = measurementThreads.resetExitFlagThread("Start Threading")
                         measurementThread = measurementThreads.measurementThread("Measurement Value: ",0.05,self.btc,requiredData,ringBuffString,ringBuffFloat)
                         #guiThread = measurementThreads.guiThread("Update Gui",0.1,self.tlTextline,self.widget.canvas,ringBuffString,ringBuffFloat)
                        
                         threads.append(startThreading)
                         threads.append(measurementThread)
                         #threads.append(guiThread)
                       
                         # Start new Threads
                         startThreading.start()
                         measurementThread.start()
                         #guiThread.start()
  
                        

if __name__=='__main__':
    app = QtGui.QApplication(sys.argv)
    hwl1 = hwl()
    hwl1.main()
    sys.exit(app.exec_())
    






